<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="leam.views">
<metal:slot fill-slot='style_slot'>
  <style> /* set the CSS */
  
    path { 
      stroke: steelblue;
      stroke-width: 2;
      fill: none;
      }
  
    .axis path,
    .axis line {
      fill: none;
      stroke: grey;
      stroke-width: 1;
      shape-rendering: crispEdges;
      }
  </style>
</metal:slot>

<metal:slot fill-slot='javascript_head_slot'>
  <script src="http://d3js.org/d3.v3.min.js"></script>
</metal:slot>

<body>
    <div metal:fill-slot="main">
      <tal:main-macro metal:define-macro="main">

        <table class="listing">
          <thead>
            <tr>
              <th>Title</th>
              <th>Author</th>
              <th>Date</th>
              <th>Pop</th>
              <th>Emp</th>
            </tr>
          </thead>
          <tbody>
            <tr tal:repeat="proj view/projections">
              <td>
                <a href="#" tal:attributes="href proj/url;
                                            title proj/description"
                            tal:content="proj/title">title</a>
              </td>
              <td tal:content="proj/author">author</td>
              <td tal:content="proj/modified">date</td>
              <td tal:content="proj/endpop">pop</td>
              <td tal:content="proj/endemp">emp</td>
            </tr>
          </tbody>
        </table>

  <script>
  
  // Set the dimensions of the canvas / graph
  var margin = {top: 30, right: 20, bottom: 30, left: 50},
      width = 600 - margin.left - margin.right,
      height = 270 - margin.top - margin.bottom;
  
  // Parse the date / time
  var parseDate = d3.time.format("%d-%b-%y").parse;
  
  // Set the ranges
  var x = d3.time.scale().range([0, width]);
  var y = d3.scale.linear().range([height, 0]);
  
  // Define the axes
  var xAxis = d3.svg.axis().scale(x)
      .orient("bottom").ticks(5);
  
  var yAxis = d3.svg.axis().scale(y)
      .orient("left").ticks(5);
  
  // Define the line
  var valueline = d3.svg.line()
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.close); });
      
  // Adds the svg canvas
  var svg = d3.select("body")
      .append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
      .append("g")
          .attr("transform", 
                "translate(" + margin.left + "," + margin.top + ")");
  
  // Get the data
  d3.csv("data.csv", function(error, data) {
      data.forEach(function(d) {
          d.date = parseDate(d.date);
          d.close = +d.close;
      });
  
      // Scale the range of the data
      x.domain(d3.extent(data, function(d) { return d.date; }));
      y.domain([0, d3.max(data, function(d) { return d.close; })]);
  
      // Add the valueline path.
      svg.append("path")
          .attr("class", "line")
          .attr("d", valueline(data));
  
      // Add the X Axis
      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);
  
      // Add the Y Axis
      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis);
  
  });
  
  </script>

        </tal:main-macro>
    </div>
    
</body>
</html>
